from typing import Optional

import pygame as pg

from src.MVC.view import View
from src.MVC.model import Model
from src.preload.tree.node import Node


class Controller:
    """
    Handles the interaction between the model and the view in the application. This class processes
    user input, updates the model state, and refreshes the view based on the current state of the model.
    """

    def __init__(self):
        self.model = Model()
        self.view = View()

    def process_input(self, events: list[pg.event.Event], dt_time: float):
        """
        Processes user input events and updates the model accordingly. This method handles
        panning and zooming actions based on the events received from the user.

        Args:
            events (list[pg.event.Event]): A list of events generated by user interactions.
            dt_time (float): The time elapsed since the last frame, used for time-based calculations.
        """

        self.model.pan()
        
        for event in events:
            if event.type == pg.MOUSEWHEEL:
                self.model.zoom(event.y)

    def update_view(self):
        """
        Updates the view based on the current state of the model and its components. This method
        refreshes the theme, visibility, and tree representation in the view, ensuring that the
        user interface reflects the latest data.
        """

        tree_manager = self.model.tree_manager
        theme_manager = self.model.theme_manager
        self.view.request_theme(theme_manager.current_theme)
        self.view.request_visibility(self.model.visibility_dict)

        if tree_manager.segment_tree.array_length != 0:
            hovered_node: Optional[Node] = self.view.draw_tree(tree_manager.segment_tree.root)
            self.view.view_array(tree_manager.segment_tree.array, hovered_node)
            self.view.view_hovered_node_info(hovered_node)
